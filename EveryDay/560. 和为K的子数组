## [560. 和为K的子数组](https://leetcode-cn.com/problems/subarray-sum-equals-k/)

`难度:中等`

### 题目描述

给定一个整数数组和一个整数 k，你需要找到该数组中和为 k 的连续的子数组的个数。

示例 1 :

> 输入:nums = [1,1,1], k = 2
> 输出: 2 , [1,1] 与 [1,1] 为两种不同的情况。

说明 :

数组的长度为 [1, 20,000]。
数组中元素的范围是 [-1000, 1000] ，且整数 k 的范围是 [-1e7, 1e7]。

### Solution

没有说从小到大，也不是正整数。不能用滑动窗口的思路，需要用到**前缀和**的思想。
- **前缀和**：当前项之前的所有项的和,则可以将当前项用两个相邻的前缀和的差来表示
 preSum[x] = nums[0]+nums[1]+…+nums[x] 
 - nums 数组从i到 j项的和：
nums[i] +…+nums[j]=preSum[j] - preSum[i-1] =k
即preSum[j] =preSum[i-1] -k
- 所以转化成 `找前缀和数组中两个数的差==k的情况`。
- 因为会有正负数，就会抵消，存在前缀和相等的情况（前缀和数组中会有重复），所以用哈希表来存这个前缀和数组。

```java
class Solution {
    public int subarraySum(int[] nums, int k) {
        // key：前缀和，value：key 对应的前缀和的个数
        Map<Integer, Integer> preSumFreq = new HashMap<>();
        int count = 0;
        int preSum = 0; //前缀和
        preSumFreq.put(0, 1);
        for(int num : nums){
            preSum += num;
            // 先获得前缀和为 preSum - k 的个数，加到计数变量里
            if(preSumFreq.containsKey(preSum - k)){
                count += preSumFreq.get(preSum - k);
            }
            // 维护 preSumFreq
            preSumFreq.put(preSum, preSumFreq.getOrDefault(preSum, 0) + 1);
        }
        return count;
    }
}
```

